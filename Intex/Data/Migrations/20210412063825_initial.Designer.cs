// <auto-generated />
using System;
using Intex.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Intex.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210412063825_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Intex.Models.Burial", b =>
                {
                    b.Property<string>("BurialId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArtifactFound")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArtifactsDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("BasilarSuture")
                        .HasColumnType("TEXT");

                    b.Property<long?>("BasionBregmaHeight")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BasionNasion")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BasionProsthionLength")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("BizygomaticDiameter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BoneLength")
                        .HasColumnType("TEXT");

                    b.Property<string>("BoneTaken")
                        .HasColumnType("TEXT");

                    b.Property<long?>("BurialDepth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BurialLocationEw")
                        .HasColumnType("TEXT");

                    b.Property<string>("BurialLocationNs")
                        .HasColumnType("TEXT");

                    b.Property<string>("BurialNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("BurialSituation")
                        .HasColumnType("TEXT");

                    b.Property<string>("BurialSubplot")
                        .HasColumnType("TEXT");

                    b.Property<string>("CranialSuture")
                        .HasColumnType("TEXT");

                    b.Property<string>("DayFound")
                        .HasColumnType("TEXT");

                    b.Property<string>("DescriptionOfTaken")
                        .HasColumnType("TEXT");

                    b.Property<long?>("DorsalPitting")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EastToFeet")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("EastToHead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EpiphysealUnion")
                        .HasColumnType("TEXT");

                    b.Property<string>("EstimateAge")
                        .HasColumnType("TEXT");

                    b.Property<string>("EstimateLivingStature")
                        .HasColumnType("TEXT");

                    b.Property<string>("FemurDiameter")
                        .HasColumnType("TEXT");

                    b.Property<string>("FemurHead")
                        .HasColumnType("TEXT");

                    b.Property<string>("FemurLength")
                        .HasColumnType("TEXT");

                    b.Property<string>("ForemanMagnum")
                        .HasColumnType("TEXT");

                    b.Property<string>("GeFunctionTotal")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenderBodyCol")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenderGe")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gonian")
                        .HasColumnType("TEXT");

                    b.Property<string>("HairColor")
                        .HasColumnType("TEXT");

                    b.Property<string>("HairTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("HeadDirection")
                        .HasColumnType("TEXT");

                    b.Property<string>("HighPairEw")
                        .HasColumnType("TEXT");

                    b.Property<string>("HighPairNs")
                        .HasColumnType("TEXT");

                    b.Property<string>("Humerus")
                        .HasColumnType("TEXT");

                    b.Property<string>("HumerusHead")
                        .HasColumnType("TEXT");

                    b.Property<string>("HumerusLength")
                        .HasColumnType("TEXT");

                    b.Property<string>("IliacCrest")
                        .HasColumnType("TEXT");

                    b.Property<long?>("InterorbitalBreadth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LengthOfRemains")
                        .HasColumnType("TEXT");

                    b.Property<string>("LowPairEw")
                        .HasColumnType("TEXT");

                    b.Property<string>("LowPairNs")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MaximumCranialBreadth")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MaximumCranialLength")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MaximumNasalBreadth")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MedialClavicle")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MedialIpRamus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MonthFound")
                        .HasColumnType("TEXT");

                    b.Property<long?>("NasionProsthion")
                        .HasColumnType("INTEGER");

                    b.Property<string>("NuchalCrest")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrbitEdge")
                        .HasColumnType("TEXT");

                    b.Property<string>("Osteophytosis")
                        .HasColumnType("TEXT");

                    b.Property<string>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ParietalBossing")
                        .HasColumnType("TEXT");

                    b.Property<string>("PathologyAnomalies")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PreaurSulcus")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PreservationIndex")
                        .HasColumnType("TEXT");

                    b.Property<long?>("PubicBone")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PubicSymphysis")
                        .HasColumnType("TEXT");

                    b.Property<string>("Robust")
                        .HasColumnType("TEXT");

                    b.Property<string>("SampleNumber")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SciaticNotch")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SoftTissueTaken")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SouthToFeet")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SouthToHead")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("SubpubicAngle")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SupraorbitalRidges")
                        .HasColumnType("TEXT");

                    b.Property<string>("TextileTaken")
                        .HasColumnType("TEXT");

                    b.Property<string>("TibiaLength")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToothAttrition")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToothEruption")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToothTaken")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VentralArc")
                        .HasColumnType("INTEGER");

                    b.Property<string>("YearFound")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZygomaticCrest")
                        .HasColumnType("TEXT");

                    b.HasKey("BurialId");

                    b.ToTable("Burial");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
